From: Custom Chromium Build <build@example.com>
Date: Mon, 1 Jan 2024 12:00:00 +0000
Subject: [PATCH] Enhanced double-click word selection in omnibox

This patch implements focus-independent double-click word selection in the
omnibox (URL bar), allowing users to select words with double-click even
when the field is not currently focused.

---
 .../ui/views/omnibox/omnibox_view_views.cc   | 85 +++++++++++++++++++
 .../ui/views/omnibox/omnibox_view_views.h    | 12 +++
 2 files changed, 97 insertions(+)

diff --git a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
index 1234567..abcdefg 100644
--- a/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
+++ b/chrome/browser/ui/views/omnibox/omnibox_view_views.cc
@@ -200,6 +200,91 @@ OmniboxViewViews::OmniboxViewViews(OmniboxEditController* controller,
       location_bar_view_(location_bar_view),
       security_chip_(security_chip),
       scoped_template_url_service_observer_(this) {
+  // Initialize double-click tracking variables
+  last_click_time_ = base::TimeTicks();
+  last_click_location_ = gfx::Point();
+  pending_double_click_on_focus_ = false;
 }
 
 OmniboxViewViews::~OmniboxViewViews() {
@@ -400,6 +485,96 @@ void OmniboxViewViews::Update() {
   Textfield::Update();
 }
 
+// Custom double-click detection for focus-independent word selection
+bool OmniboxViewViews::IsDoubleClick(const ui::MouseEvent& event) {
+  base::TimeTicks now = event.time_stamp();
+  gfx::Point click_location = event.location();
+  bool is_double_click = false;
+  if (!last_click_time_.is_null()) {
+    base::TimeDelta time_delta = now - last_click_time_;
+    int distance = std::abs(click_location.x() - last_click_location_.x()) +
+                  std::abs(click_location.y() - last_click_location_.y());
+    if (time_delta <= kDoubleClickInterval && distance <= kDoubleClickDistance) {
+      is_double_click = true;
+    }
+  }
+  last_click_time_ = now;
+  last_click_location_ = click_location;
+  return is_double_click;
+}
+
+// Select word at click location
+void OmniboxViewViews::HandleDoubleClickSelection(const ui::MouseEvent& event) {
+  Textfield::SelectWordAt(event.location());
+}
+
+// Override OnMouseEvent for unfocused double-click detection
+bool OmniboxViewViews::OnMouseEvent(const ui::MouseEvent& event) {
+  // Handle double-click on unfocused omnibox
+  if (event.type() == ui::EventType::kMousePressed && 
+      event.IsLeftMouseButton() && !HasFocus()) {
+    
+    if (IsDoubleClick(event)) {
+      // Mark that we want to select word after focus
+      pending_double_click_on_focus_ = true;
+      RequestFocus();
+      return true;  // Consume the event
+    }
+  }
+  
+  // Let parent handle other events
+  return false;
+}
+
+// Override OnMousePressed for focused double-click handling
+bool OmniboxViewViews::OnMousePressed(const ui::MouseEvent& event) {
+  // Handle double-click when omnibox already has focus
+  if (event.IsLeftMouseButton() && HasFocus() && IsDoubleClick(event)) {
+    HandleDoubleClickSelection(event);
+    return true;  // Consume the event
+  }
+  
+  // Let parent class handle single clicks and other events
+  return Textfield::OnMousePressed(event);
+}
+
+// Override OnFocus to handle deferred double-click selection
+void OmniboxViewViews::OnFocus() {
+  // Call parent focus handler first
+  Textfield::OnFocus();
+  
+  // Handle pending double-click selection
+  if (pending_double_click_on_focus_) {
+    pending_double_click_on_focus_ = false;
+    // Use the built-in SelectWordAt method from Textfield
+    Textfield::SelectWordAt(last_click_location_);
+  }
+}
+
 }  // namespace
diff --git a/chrome/browser/ui/views/omnibox/omnibox_view_views.h b/chrome/browser/ui/views/omnibox/omnibox_view_views.h
index 1234567..abcdefg 100644
--- a/chrome/browser/ui/views/omnibox/omnibox_view_views.h
+++ b/chrome/browser/ui/views/omnibox/omnibox_view_views.h
@@ class OmniboxViewViews
 private:
+  // Custom double-click detection for focus-independent word selection
+  base::TimeTicks last_click_time_;
+  gfx::Point last_click_location_;
+  bool pending_double_click_on_focus_ = false;
+  static constexpr base::TimeDelta kDoubleClickInterval = base::Milliseconds(300);
+  static constexpr int kDoubleClickDistance = 2;  // pixels
+
+  // Helper methods for double-click word selection
+  bool IsDoubleClick(const ui::MouseEvent& event);
+  void HandleDoubleClickSelection(const ui::MouseEvent& event);
