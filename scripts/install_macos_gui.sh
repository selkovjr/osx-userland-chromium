#!/bin/bash

# macOS GUI Integration Script for Custom Chromium
# This script installs the custom Chromium build with full macOS integration

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

echo_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

echo_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo_header() {
    echo -e "${BLUE}=== $1 ===${NC}"
}

# Configuration
CHROMIUM_SOURCE="${CHROMIUM_SOURCE:-$HOME/chrome/src}"
BUILD_DIR="$CHROMIUM_SOURCE/out/Release"
APP_BUNDLE="$BUILD_DIR/Chromium.app"
INSTALL_DIR="$HOME/Applications"
APP_NAME="Chromium"

echo_header "Custom Chromium macOS Installation"
echo "Project: osx-userland-chromium"
echo "Source: $CHROMIUM_SOURCE"
echo "Target: $INSTALL_DIR/$APP_NAME.app"
echo

# Check if app bundle exists
if [ ! -d "$APP_BUNDLE" ]; then
    echo_error "Chromium app bundle not found at $APP_BUNDLE"
    echo_error "Please ensure you have:"
    echo_error "  1. Built Chromium with: autoninja -C out/Release chrome"
    echo_error "  2. Set CHROMIUM_SOURCE environment variable if using custom location"
    echo_error "  3. Applied all patches from this repository"
    exit 1
fi

echo_info "Found Chromium app bundle at $APP_BUNDLE"

# 1. Create ~/Applications directory if it doesn't exist
echo_info "Setting up installation directory..."
mkdir -p "$INSTALL_DIR"

# 2. Remove existing installation if present
if [ -d "$INSTALL_DIR/$APP_NAME.app" ]; then
    echo_warn "Removing existing $APP_NAME.app installation..."
    rm -rf "$INSTALL_DIR/$APP_NAME.app"
fi

# 3. Copy app bundle to user Applications
echo_info "Installing app bundle to $INSTALL_DIR..."
cp -R "$APP_BUNDLE" "$INSTALL_DIR/"

# 4. Update permissions
echo_info "Setting executable permissions..."
chmod +x "$INSTALL_DIR/$APP_NAME.app/Contents/MacOS/$APP_NAME"

# 5. Update Info.plist with custom metadata
echo_info "Updating app bundle metadata..."
PLIST_FILE="$INSTALL_DIR/$APP_NAME.app/Contents/Info.plist"
if [ -f "$PLIST_FILE" ]; then
    # Add custom metadata for better Spotlight integration
    /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName 'Chromium'" "$PLIST_FILE" 2>/dev/null || true
    /usr/libexec/PlistBuddy -c "Set :NSHighResolutionCapable true" "$PLIST_FILE" 2>/dev/null || true
    echo_info "✅ App bundle metadata updated"
else
    echo_warn "⚠️ Info.plist not found, skipping metadata update"
fi

# 6. Register with LaunchServices
echo_info "Registering with LaunchServices..."
/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister \
    -f "$INSTALL_DIR/$APP_NAME.app"

# 7. Update Spotlight index
echo_info "Updating Spotlight index..."
mdimport "$INSTALL_DIR/$APP_NAME.app"

# 8. Create command-line launcher
echo_info "Creating command-line launcher..."
LAUNCHER_PATH="/usr/local/bin/chromium"

# Create launcher script
sudo tee "$LAUNCHER_PATH" > /dev/null << EOF
#!/bin/bash
# Custom Chromium Launcher
# Generated by osx-userland-chromium installation script

# Set up environment for Google API keys if available
if [ -n "\$GOOGLE_API_KEY" ]; then
    export GOOGLE_API_KEY="\$GOOGLE_API_KEY"
fi

if [ -n "\$GOOGLE_DEFAULT_CLIENT_ID" ]; then
    export GOOGLE_DEFAULT_CLIENT_ID="\$GOOGLE_DEFAULT_CLIENT_ID"
fi

if [ -n "\$GOOGLE_DEFAULT_CLIENT_SECRET" ]; then
    export GOOGLE_DEFAULT_CLIENT_SECRET="\$GOOGLE_DEFAULT_CLIENT_SECRET"
fi

# Launch Chromium with all arguments passed through
exec "$INSTALL_DIR/$APP_NAME.app/Contents/MacOS/$APP_NAME" "\$@"
EOF

sudo chmod +x "$LAUNCHER_PATH"

# 9. Remove quarantine attribute (for unsigned builds)
echo_info "Removing quarantine attribute..."
xattr -dr com.apple.quarantine "$INSTALL_DIR/$APP_NAME.app" 2>/dev/null || true

# 10. Set up default preferences
echo_info "Configuring default preferences..."
PREFS_DIR="$HOME/Library/Application Support/$APP_NAME/Default"
mkdir -p "$PREFS_DIR"

# Create preferences file if it doesn't exist
if [ ! -f "$PREFS_DIR/Preferences" ]; then
    cat > "$PREFS_DIR/Preferences" << 'EOF'
{
   "session": {
      "restore_on_startup": 1
   },
   "browser": {
      "show_home_button": true,
      "check_default_browser": false
   },
   "bookmark_bar": {
      "show_on_all_tabs": false
   },
   "net": {
      "network_prediction_options": 2
   },
   "profile": {
      "default_content_setting_values": {
         "notifications": 1,
         "media_stream_camera": 1,
         "media_stream_mic": 1
      }
   },
   "download": {
      "default_directory": "~/Downloads"
   }
}
EOF
    echo_info "✅ Default preferences configured"
else
    echo_info "✅ Existing preferences preserved"
fi

# 11. Verification
echo_header "Installation Verification"

# Check app bundle
if [ -d "$INSTALL_DIR/$APP_NAME.app" ]; then
    echo_info "✅ App bundle installed successfully"
else
    echo_error "❌ App bundle installation failed"
    exit 1
fi

# Check executable
if [ -x "$INSTALL_DIR/$APP_NAME.app/Contents/MacOS/$APP_NAME" ]; then
    echo_info "✅ Executable permissions set correctly"
else
    echo_error "❌ Executable permissions incorrect"
fi

# Check command-line launcher
if [ -x "$LAUNCHER_PATH" ]; then
    echo_info "✅ Command-line launcher installed"
else
    echo_warn "⚠️ Command-line launcher installation failed (may need sudo)"
fi

# Test LaunchServices registration
if /usr/bin/mdfind "kMDItemCFBundleIdentifier == 'org.chromium.Chromium'" | grep -q "$APP_NAME.app"; then
    echo_info "✅ LaunchServices registration successful"
else
    echo_warn "⚠️ LaunchServices registration may not be complete"
fi

# Test Spotlight indexing
if mdfind "$APP_NAME" | grep -q "$APP_NAME.app"; then
    echo_info "✅ Spotlight indexing successful"
else
    echo_warn "⚠️ Spotlight indexing may take a few minutes"
fi

# Display installation summary
echo_header "Installation Complete!"
echo
echo "Your custom Chromium browser is now installed with full macOS integration."
echo
echo -e "${GREEN}Launch Methods:${NC}"
echo "  • Spotlight Search: Press Cmd+Space, type 'Chromium'"
echo "  • Applications Folder: Open ~/Applications and double-click Chromium"
echo "  • Command Line: Run 'chromium' in Terminal"
echo "  • Dock: Drag ~/Applications/Chromium.app to Dock for easy access"
echo
echo -e "${GREEN}Enhanced Features:${NC}"
echo "  ✅ Okta/SAML authentication with push notifications"
echo "  ✅ OAuth redirects to localhost and private networks"
echo "  ✅ Focus-independent double-click text selection in URL bar"
echo "  ✅ Automatic session restore on startup"
echo "  ✅ Full camera/microphone access for video calls"
echo "  ✅ Chrome user agent for maximum web compatibility"
echo
echo -e "${GREEN}Configuration:${NC}"
echo "  • Profile: ~/Library/Application Support/Chromium/"
echo "  • Preferences: Configured for optimal enterprise use"
echo "  • Updates: Manual updates via rebuild process"
echo
echo -e "${YELLOW}To uninstall:${NC}"
echo "  1. Remove ~/Applications/Chromium.app"
echo "  2. Remove /usr/local/bin/chromium"
echo "  3. Run: lsregister -u ~/Applications/Chromium.app"
echo "  4. Remove: ~/Library/Application Support/Chromium/"
echo
echo -e "${BLUE}For support and updates:${NC}"
echo "  • Repository: https://github.com/YOUR_USERNAME/osx-userland-chromium"
echo "  • Documentation: See docs/ directory"
echo "  • Feature testing: Run scripts/test_features.sh"
echo

# Optional: offer to add to Dock
read -p "Would you like to add Chromium to your Dock? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v dockutil >/dev/null 2>&1; then
        dockutil --add "$INSTALL_DIR/$APP_NAME.app" --allhomes
        echo_info "✅ Added to Dock via dockutil"
    else
        echo_info "💡 To add to Dock: drag ~/Applications/Chromium.app to your Dock"
        echo_info "   Or install dockutil: brew install dockutil"
    fi
fi

echo_info "Installation script completed successfully!"